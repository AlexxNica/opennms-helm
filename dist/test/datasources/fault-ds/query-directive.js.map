{"version":3,"sources":["../../../../src/datasources/fault-ds/query-directive.js"],"names":["module","directive","templateUrl","controller","restrict","controllerAs","scope","query","datasource","queryCtrl","$scope","uiSegmentSrv","$q","QueryCtrl","updateControls","getSuggestions","clause","segment","index","segments","restriction","type","metricFindQuery","find","then","properties","map","property","newKey","id","catch","handleQueryError","bind","attributeSegment","value","comparators","filter","comparator","aliases","length","uiComparator","getUiComparator","newOperator","theQuery","values","searchResult","newKeyValue","label","operators","operator","newCondition","when","segmentUpdated","segmentIndex","updateTargetFilter","performClick","control","action","findParent"],"mappings":"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","file":"query-directive.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {ComparatorMapping} from \"./mapping/ComparatorMapping\";\n\nangular.module('grafana.directives')\n    .directive('onmsQuery', function() {\n        return {\n            templateUrl: 'public/plugins/opennms-helm-app/datasources/fault-ds/partials/query.html',\n            controller: 'QueryController',\n            restrict: 'EA',\n            controllerAs: 'ctrl',\n            scope: {\n                query: \"=\", // The ui query object\n                datasource: \"=\", // The datasource\n                queryCtrl: \"=\", // The QueryCtrl object\n            }\n        };\n    })\n    .controller('QueryController', function ($scope, uiSegmentSrv, $q) {\n        const datasource = $scope.datasource;\n        const QueryCtrl = $scope.queryCtrl;\n        $scope.query.updateControls();\n\n        $scope.getSuggestions = function(clause, segment, index) {\n            var segments = clause.restriction.segments;\n\n            // attribute input\n            if (segment.type == 'key' || segment.type == 'plus-button') {\n                return datasource.metricFindQuery({find: \"attributes\"})\n                    .then(function(properties) {\n                        let segments = _.map(properties, function(property) {\n                            var segment = uiSegmentSrv.newKey(property.id);\n                            return segment;\n                        });\n                        return segments;\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // comparator input\n            if (segment.type == 'operator') {\n                let attributeSegment = segments[index-1];\n                return datasource.metricFindQuery({'find': 'comparators', 'attribute': attributeSegment.value})\n                    .then(function(comparators) {\n                        // the API.Comparator.id or API.Comparator.label fields cannot be used.\n                        comparators = _.filter(comparators, function(comparator) {\n                            return comparator.aliases && comparator.aliases.length > 0;\n                        });\n                        return _.map(comparators, function(comparator) {\n                            const uiComparator = new ComparatorMapping().getUiComparator(comparator);\n                            return uiSegmentSrv.newOperator(uiComparator);\n                        });\n                    }).catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // value input\n            if (segment.type == 'value') {\n                let attributeSegment = segments[index-2];\n                let theQuery = {\n                    'find': 'values',\n                    'attribute': attributeSegment.value,\n                    'query': segment.value === 'select attribute value' ? '' : segment.value\n                };\n\n                return datasource.metricFindQuery(theQuery)\n                    .then(function(values) {\n                        return _.map(values, function(searchResult) {\n                            var segment = uiSegmentSrv.newKeyValue(searchResult.label);\n                            return segment;\n                        })\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // condition input\n            if (segment.type === 'condition') {\n                return this.datasource.metricFindQuery({find: 'operators'}).then(function(operators) {\n                    return _.map(operators, function(operator) {\n                        return uiSegmentSrv.newCondition(operator.label);\n                    });\n                }).catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n            return $q.when([]);\n        };\n\n        $scope.segmentUpdated = function(clause, segment, segmentIndex) {\n            $scope.query.segmentUpdated(clause, segment, segmentIndex);\n            $scope.query.updateControls();\n            QueryCtrl.updateTargetFilter();\n        };\n\n        $scope.performClick = function(clause, control) {\n            if (control.action) {\n                control.action($scope.query, clause);\n                QueryCtrl.updateTargetFilter();\n                $scope.query.findParent().updateControls();\n            }\n        }\n    });\n"]}