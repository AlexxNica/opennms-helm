{"version":3,"sources":["../../../../src/datasources/fault-ds/datasource.js"],"names":["OpenNMSFMDatasource","instanceSettings","$q","backendSrv","templateSrv","contextSrv","type","url","name","q","alarmClient","jsonData","useGrafanaUser","grafanaUserField","user","login","options","filter","targets","Filter","limit","enforceTimeRange","clonedFilter","buildQuery","self","findAlarms","then","getClientWithMetadata","data","toTable","alarms","client","server","metadata","cloneFilter","withAndRestriction","NestedRestriction","Restriction","Comparators","GE","LE","substitute","clauses","each","clause","restriction","value","range","from","to","replace","scopedVars","datasourceRequest","method","response","status","message","title","when","query","find","getProperties","getPropertyComparators","attribute","searchForValues","findOperators","findProperty","property","id","findUsers","map","rows","label","findNodes","node","findCategories","category","findLocations","location","findSeverities","severity","findServices","service","columnNames","columns","column","row","alarm","logMessage","description","uei","nodeId","nodeLabel","ipAddress","serviceType","undefined","ackUser","firstEventTime","lastEventTime","lastEvent","source","troubleTicket","troubleTicketState","count","meta","ticketerConfig","alarmId","getAlarm","doAck","doUnack","doClear","doEscalate","doTicketAction","sticky","saveSticky","deleteSticky","journal","saveJournal","deleteJournal"],"mappings":"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","file":"datasource.js","sourcesContent":["import {ClientDelegate} from './client_delegate';\nimport {API} from '../../opennms';\nimport {FilterCloner} from \"./FilterCloner\"\nimport _ from 'lodash';\n\nexport class OpenNMSFMDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, contextSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.alarmClient = new ClientDelegate(instanceSettings, backendSrv, $q);\n\n    // When enabled in the datasource, the grafana user should be used instead of the datasource username on\n    // supported operations\n    if (instanceSettings.jsonData && instanceSettings.jsonData.useGrafanaUser) {\n        // If the datasource contains the field which should be used and that field is set, use it\n        if (instanceSettings.jsonData.grafanaUserField && contextSrv.user[instanceSettings.jsonData.grafanaUserField]) {\n            this.user = contextSrv.user[instanceSettings.jsonData.grafanaUserField];\n        } else { // otherwise the login is used instead\n            this.user = contextSrv.user.login;\n        }\n    }\n  }\n\n  query(options) {\n      // Initialize filter\n      var filter = options.targets[0].filter || new API.Filter();\n      filter.limit = 0; // no limit\n\n      options.enforceTimeRange = true;\n      const clonedFilter = this.buildQuery(filter, options);\n\n      var self = this;\n      return this.alarmClient.findAlarms(clonedFilter).then(alarms => {\n          return this.alarmClient.getClientWithMetadata().then(client => {\n              return {\n                data: self.toTable(alarms, client.server.metadata)\n              };\n          });\n      });\n  }\n\n  // Clone Filter to prevent some issues and also make substitution possible\n  // (otherwise substitution would happen in original query, and overwriting the $<variable> or [[variable]] in restrictions which may not be the intention)\n  buildQuery(filter, options) {\n      var clonedFilter = new FilterCloner().cloneFilter(filter);\n\n      // Before replacing any variables, add a global time range restriction (which is hidden to the user)\n      if (options && options.enforceTimeRange) {\n          clonedFilter.withAndRestriction(\n              new API.NestedRestriction()\n                  .withAndRestriction(new API.Restriction(\"lastEventTime\", API.Comparators.GE, \"$range_from\"))\n                  .withAndRestriction(new API.Restriction(\"lastEventTime\", API.Comparators.LE, \"$range_to\")));\n      }\n\n      // Subsitute $<variable> or [[variable]] in the restriction value\n      this.substitute(clonedFilter.clauses, options);\n      return clonedFilter;\n  }\n\n  substitute(clauses, options) {\n      const self = this;\n      _.each(clauses, clause => {\n        if (clause.restriction) {\n            if (clause.restriction instanceof API.NestedRestriction) {\n                self.substitute(clause.restriction.clauses, options);\n            } else if (clause.restriction.value) {\n                // Range must be of type date, otherwise it is not parseable by the OpenNMS client\n                if (clause.restriction.value === '$range_from' || clause.restriction.value === \"[[range_from]]\") {\n                    clause.restriction.value = options.range.from;\n                } else if (clause.restriction.value === '$range_to' || clause.restriction.value === \"[[range_to]]\") {\n                    clause.restriction.value = options.range.to;\n                } else {\n                    clause.restriction.value = self.templateSrv.replace(clause.restriction.value, options.scopedVars);\n                }\n            }\n        }\n      });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/info',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when([]);\n  }\n\n  metricFindQuery(query) {\n    if (!query || !query.find) {\n        return this.q.when([]);\n    }\n\n    if (query.find === \"attributes\") {\n      return this.alarmClient.getProperties();\n    }\n    if (query.find === \"comparators\") {\n      return this.alarmClient.getPropertyComparators(query.attribute);\n    }\n    if (query.find == 'values') {\n        return this.searchForValues(query);\n    }\n    if (query.find === 'operators') {\n        return this.alarmClient.findOperators();\n    }\n    return this.q.when([]);\n  }\n\n  searchForValues(query) {\n      return this.alarmClient.findProperty(query.attribute)\n          .then(property => {\n              if (!property) {\n                  return this.q.when([]);\n              }\n              switch (property.id) {\n                  case 'alarmAckUser':\n                  case 'suppressedUser':\n                  case 'lastEvent.eventAckUser':\n                      return this.alarmClient.findUsers({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (user) {\n                                  return {\n                                      id: user['user-id'],\n                                      label: user['full-name']\n                                  };\n                              });\n                          });\n                  case 'node.label':\n                      return this.alarmClient.findNodes({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (node) {\n                                  return {\n                                      id: node.label,\n                                      label: node.label\n                                  }\n                              });\n                          });\n                  case 'category.name':\n                      return this.alarmClient.findCategories({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (category) {\n                                  return {\n                                      id: category.id,\n                                      label: category.name\n                                  };\n                              })\n                          });\n                  case 'location.locationName':\n                      return this.alarmClient.findLocations({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (location) {\n                                  return {\n                                      id: location['location-name'],\n                                      label: location['location-name']\n                                  };\n                              })\n                          });\n                  case 'severity':\n                      return this.alarmClient.findSeverities({query: query.query})\n                          .then(function (data) {\n                              return _.map(data, function (severity) {\n                                  return {\n                                      id: severity.id,\n                                      label: severity.label\n                                  }\n                              })\n                          });\n                  case 'serviceType.name':\n                      return this.alarmClient.findServices({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (service) {\n                                  return {\n                                      id: service,\n                                      label: service\n                                  }\n                              })\n                          });\n          }\n      });\n  }\n\n    // Converts the data fetched from the Alarm REST Endpoint of OpenNMS to the grafana table model\n    toTable(alarms, metadata) {\n        var columnNames = [\n            \"Log Message\", \"Description\",\n            \"UEI\", \"Node ID\", \"Node Label\",\n            \"IP Address\", \"Service\", \"Acked By\", \"Severity\",\n            \"First Event Time\", \"Last Event Time\", \"Event Source\",\n            \"Trouble Ticket\", \"Trouble Ticket State\", \"Count\"];\n\n        var columns = _.map(columnNames, column => {\n            return { \"text\" : column }\n        });\n\n        var rows = _.map(alarms, alarm => {\n            var row = [\n                alarm.logMessage,\n                alarm.description,\n                alarm.uei,\n                alarm.nodeId,\n                alarm.nodeLabel,\n                alarm.ipAddress,\n                alarm.serviceType ? alarm.serviceType.name : undefined,\n                alarm.ackUser,\n                alarm.severity.label,\n                alarm.firstEventTime,\n                alarm.lastEventTime,\n                alarm.lastEvent.source,\n                alarm.troubleTicket,\n                alarm.troubleTicketState,\n                alarm.count\n            ];\n            row.meta = {\n                // Store the alarm for easy access by the panels - may not be necessary\n                'alarm': alarm,\n                // Store the name of the data-source as part of the data so that\n                // the panel can grab an instance of the DS to perform actions\n                // on the alarms\n                \"source\": this.name,\n                // Store the ticketerConfig here\n                \"ticketerConfig\": metadata.ticketerConfig\n            };\n            return row;\n        });\n\n        return [\n            {\n                \"columns\": columns,\n                \"rows\": rows,\n                \"type\": \"table\",\n            }\n        ];\n    }\n\n    getAlarm(alarmId) {\n        return this.alarmClient.getAlarm(alarmId);\n    }\n\n    acknowledgeAlarm(alarmId) {\n        return this.alarmClient.doAck(alarmId, this.user);\n    }\n\n    unacknowledgeAlarm(alarmId) {\n        return this.alarmClient.doUnack(alarmId, this.user);\n    }\n\n    clearAlarm(alarmId) {\n        return this.alarmClient.doClear(alarmId, this.user);\n    }\n\n    escalateAlarm(alarmId) {\n        return this.alarmClient.doEscalate(alarmId, this.user);\n    }\n\n    createTicketForAlarm(alarmId) {\n        return this.alarmClient.doTicketAction(alarmId, \"create\");\n    }\n\n    updateTicketForAlarm(alarmId) {\n        return this.alarmClient.doTicketAction(alarmId, \"update\");\n    }\n\n    closeTicketForAlarm(alarmId) {\n        return this.alarmClient.doTicketAction(alarmId, \"close\");\n    }\n\n    saveSticky(alarmId, sticky) {\n        return this.alarmClient.saveSticky(alarmId, sticky, this.user);\n    }\n\n    deleteSticky(alarmId) {\n        return this.alarmClient.deleteSticky(alarmId);\n    }\n\n    saveJournal(alarmId, journal) {\n        return this.alarmClient.saveJournal(alarmId, journal, this.user);\n    }\n\n    deleteJournal(alarmId) {\n        return this.alarmClient.deleteJournal(alarmId);\n    }\n}\n"]}