{"version":3,"sources":["../../../../src/datasources/fault-ds/datasource.js"],"names":["OpenNMSFMDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","alarmClient","options","filter","targets","Filter","limit","clonedFilter","cloneFilter","substitute","clauses","self","findAlarms","then","alarms","data","toTable","each","clause","restriction","NestedRestriction","value","replace","scopedVars","datasourceRequest","method","response","status","message","title","when","query","find","getProperties","getPropertyComparators","attribute","searchForValues","findOperators","findProperty","property","id","findUsers","map","rows","user","label","findNodes","node","findCategories","category","findLocations","location","findSeverities","severity","findServices","service","columnNames","columns","column","row","alarm","logMessage","description","uei","nodeId","nodeLabel","ipAddress","serviceType","undefined","ackUser","firstEventTime","lastEventTime","lastEvent","source","troubleTicket","troubleTicketState","count","meta","alarmId","getAlarm","doAck","doUpdate","ack","clear","escalate","doTicketAction","sticky","saveSticky","deleteSticky","journal","saveJournal","deleteJournal"],"mappings":"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","file":"datasource.js","sourcesContent":["import {ClientDelegate} from './client_delegate';\nimport {API} from '../../opennms';\nimport {FilterCloner} from \"./FilterCloner\"\nimport _ from 'lodash';\n\nexport class OpenNMSFMDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.alarmClient = new ClientDelegate(instanceSettings, backendSrv, $q);\n  }\n\n  query(options) {\n      // Initialize filter\n      var filter = options.targets[0].filter || new API.Filter();\n      filter.limit = 0; // no limit\n\n      // Clone Filter to prevent some issues and also make substitution possible\n      // (otherwise substitution would happen in original query, and overwriting the $<variable> which may not be the intention)\n      var clonedFilter = new FilterCloner().cloneFilter(filter);\n      this.substitute(clonedFilter.clauses, options);\n\n      var self = this;\n      return this.alarmClient.findAlarms(clonedFilter).then(function(alarms) {\n          return {\n              data: self.toTable(alarms)\n          };\n      });\n  }\n\n  substitute(clauses, options) {\n      const self = this;\n      _.each(clauses, clause => {\n        if (clause.restriction) {\n            if (clause.restriction instanceof API.NestedRestriction) {\n                self.substitute(clause.restriction.clauses, options);\n            } else if (clause.restriction.value) {\n                // TODO MVR: This is a hint on how to probably best implement HELM-12\n                // clause.restriction.value = clause.restriction.value.replace(/\\$timeFrom/g, options.range.from.valueOf());\n                // clause.restriction.value = clause.restriction.value.replace(/\\$timeTo/g, options.range.to.valueOf());\n                clause.restriction.value = self.templateSrv.replace(clause.restriction.value, options.scopedVars);\n            }\n        }\n      });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/info',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when([]);\n  }\n\n  metricFindQuery(query) {\n    if (!query || !query.find) {\n        return this.q.when([]);\n    }\n\n    if (query.find === \"attributes\") {\n      return this.alarmClient.getProperties();\n    }\n    if (query.find === \"comparators\") {\n      return this.alarmClient.getPropertyComparators(query.attribute);\n    }\n    if (query.find == 'values') {\n        return this.searchForValues(query);\n    }\n    if (query.find === 'operators') {\n        return this.alarmClient.findOperators();\n    }\n    return this.q.when([]);\n  }\n\n  searchForValues(query) {\n      return this.alarmClient.findProperty(query.attribute)\n          .then(property => {\n              if (!property) {\n                  return this.q.when([]);\n              }\n              switch (property.id) {\n                  case 'alarmAckUser':\n                  case 'suppressedUser':\n                  case 'lastEvent.eventAckUser':\n                      return this.alarmClient.findUsers({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (user) {\n                                  return {\n                                      id: user['user-id'],\n                                      label: user['full-name']\n                                  };\n                              });\n                          });\n                  case 'node.label':\n                      return this.alarmClient.findNodes({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (node) {\n                                  return {\n                                      id: node.label,\n                                      label: node.label\n                                  }\n                              });\n                          });\n                  case 'category.name':\n                      return this.alarmClient.findCategories({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (category) {\n                                  return {\n                                      id: category.id,\n                                      label: category.name\n                                  };\n                              })\n                          });\n                  case 'location.locationName':\n                      return this.alarmClient.findLocations({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (location) {\n                                  return {\n                                      id: location['location-name'],\n                                      label: location['location-name']\n                                  };\n                              })\n                          });\n                  case 'severity':\n                      return this.alarmClient.findSeverities({query: query.query})\n                          .then(function (data) {\n                              return _.map(data, function (severity) {\n                                  return {\n                                      id: severity.id,\n                                      label: severity.label\n                                  }\n                              })\n                          });\n                  case 'serviceType.name':\n                      return this.alarmClient.findServices({query: query.query})\n                          .then(function (data) {\n                              return _.map(data.rows, function (service) {\n                                  return {\n                                      id: service,\n                                      label: service\n                                  }\n                              })\n                          });\n          }\n      });\n  }\n\n    // Converts the data fetched from the Alarm REST Endpoint of OpenNMS to the grafana table model\n    toTable(alarms) {\n        var columnNames = [\n            \"Log Message\", \"Description\",\n            \"UEI\", \"Node ID\", \"Node Label\",\n            \"IP Address\", \"Service\", \"Acked By\", \"Severity\",\n            \"First Event Time\", \"Last Event Time\", \"Event Source\",\n            \"Trouble Ticket\", \"Trouble Ticket State\", \"Count\"];\n\n        var columns = _.map(columnNames, column => {\n            return { \"text\" : column }\n        });\n\n        var rows = _.map(alarms, alarm => {\n            var row = [\n                alarm.logMessage,\n                alarm.description,\n                alarm.uei,\n                alarm.nodeId,\n                alarm.nodeLabel,\n                alarm.ipAddress,\n                alarm.serviceType ? alarm.serviceType.name : undefined,\n                alarm.ackUser,\n                alarm.severity.label,\n                alarm.firstEventTime,\n                alarm.lastEventTime,\n                alarm.lastEvent.source,\n                alarm.troubleTicket,\n                alarm.troubleTicketState,\n                alarm.count\n            ];\n            row.meta = {\n                // Store the alarm for easy access by the panels - may not be necessary\n                'alarm': alarm,\n                // Store the name of the data-source as part of the data so that\n                // the panel can grab an instance of the DS to perform actions\n                // on the alarms\n                \"source\": this.name\n            };\n            return row;\n        });\n\n        return [\n            {\n                \"columns\": columns,\n                \"rows\": rows,\n                \"type\": \"table\",\n            }\n        ];\n    }\n\n    getAlarm(alarmId) {\n        return this.alarmClient.getAlarm(alarmId);\n    }\n\n    acknowledgeAlarm(alarmId) {\n      return this.alarmClient.doAck(alarmId);\n    }\n\n    unacknowledgeAlarm(alarmId) {\n        this.alarmClient.doUpdate(alarmId, {ack: false});\n    }\n\n    clearAlarm(alarmId) {\n        this.alarmClient.doUpdate(alarmId, {clear: true});\n    }\n\n    escalateAlarm(alarmId) {\n        this.alarmClient.doUpdate(alarmId, {escalate: true});\n    }\n\n    createTicketForAlarm(alarmId) {\n        this.alarmClient.doTicketAction(alarmId, \"create\");\n    }\n\n    updateTicketForAlarm(alarmId) {\n        this.alarmClient.doTicketAction(alarmId, \"update\");\n    }\n\n    closeTicketForAlarm(alarmId) {\n        this.alarmClient.doTicketAction(alarmId, \"close\");\n    }\n\n    saveSticky(alarmId, sticky) {\n      return this.alarmClient.saveSticky(alarmId, sticky);\n    }\n\n    deleteSticky(alarmId) {\n      return this.alarmClient.deleteSticky(alarmId);\n    }\n\n    saveJournal(alarmId, journal) {\n      return this.alarmClient.saveJournal(alarmId, journal);\n    }\n\n    deleteJournal(alarmId) {\n      return this.alarmClient.deleteJournal(alarmId);\n    }\n}\n"]}