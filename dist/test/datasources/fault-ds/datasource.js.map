{"version":3,"sources":["../../../../src/datasources/fault-ds/datasource.js"],"names":["OpenNMSFMDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","alarmClient","options","filter","targets","Filter","limit","self","findAlarms","then","alarms","data","toTable","datasourceRequest","method","response","status","message","title","when","query","find","getAttributes","getAttributeComparators","attribute","searchForValues","findOperators","findAttribute","findUsers","map","rows","user","id","label","findNodes","node","findCategories","category","findLocations","location","findSeverities","severity","findServices","service","columnNames","columns","column","row","alarm","logMessage","description","uei","nodeId","nodeLabel","ipAddress","serviceType","undefined","ackUser","firstEventTime","lastEventTime","lastEvent","source","troubleTicket","troubleTicketState","count","meta","alarmId","doUpdate","ack","clear","escalate","doTicketAction"],"mappings":"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","file":"datasource.js","sourcesContent":["import {ClientDelegate} from './client_delegate';\nimport {API} from '../../opennms';\nimport _ from 'lodash';\n\nexport class OpenNMSFMDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.alarmClient = new ClientDelegate(instanceSettings, backendSrv, $q);\n  }\n\n  query(options) {\n      var filter = options.targets[0].filter || new API.Filter();\n      filter.limit = 0; // no limit\n      var self = this;\n      return this.alarmClient.findAlarms(filter).then(function(alarms) {\n          return {\n              data: self.toTable(alarms)\n          };\n      });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/info',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when([]);\n  }\n\n  metricFindQuery(query) {\n    if (!query || !query.find) {\n        return this.q.when([]);\n    }\n\n    if (query.find === \"attributes\") {\n      return this.q.when(this.alarmClient.getAttributes());\n    }\n    if (query.find === \"comparators\") {\n      return this.q.when(this.alarmClient.getAttributeComparators(query.attribute));\n    }\n    if (query.find == 'values') {\n        return this.searchForValues(query);\n    }\n    if (query.find === 'operators') {\n        return this.alarmClient.findOperators();\n    }\n    return this.q.when([]);\n  }\n\n  searchForValues(query) {\n      let attribute = this.alarmClient.findAttribute(query.attribute) || {};\n      switch (attribute.type) {\n          case 'user':\n              return this.alarmClient.findUsers({query: query.query})\n                  .then(function(data) {\n                      return _.map(data.rows, function(user) {\n                          return {\n                              id: user['user-id'],\n                              label: user['full-name']\n                          };\n                      });\n                  });\n          case 'node':\n              return this.alarmClient.findNodes({query: query.query})\n                  .then(function(data) {\n                      return _.map(data.rows, function(node) {\n                        return {\n                            id: node.id,\n                            label: node.label\n                        }\n                      });\n                  });\n          case 'category':\n              return this.alarmClient.findCategories({query: query.query})\n                  .then(function(data) {\n                      return _.map(data.rows, function(category) {\n                          return {\n                              id: category.id,\n                              label: category.name\n                          };\n                      })\n                  });\n          case 'location':\n              return this.alarmClient.findLocations({query: query.query})\n                  .then(function(data) {\n                      return _.map(data.rows, function(location) {\n                          return {\n                              id: location['location-name'],\n                              label: location['location-name']\n                          };\n                      })\n                  });\n          case 'severity':\n              return this.alarmClient.findSeverities({query: query.query})\n                  .then(function(data) {\n                      return _.map(data, function(severity) {\n                          return {\n                              id: severity.id,\n                              label: severity.label\n                          }\n                      })\n                  });\n          case 'service':\n              return this.alarmClient.findServices({query: query.query})\n                  .then(function(data) {\n                      return _.map(data.rows, function(service) {\n                          return {\n                              id: service,\n                              label: service\n                          }\n                      })\n                  })\n      }\n      return this.q.when([]);\n  }\n\n    // Converts the data fetched from the Alarm REST Endpoint of OpenNMS to the grafana table model\n    toTable(alarms) {\n        var columnNames = [\n            \"Log Message\", \"Description\",\n            \"UEI\", \"Node ID\", \"Node Label\",\n            \"IP Address\", \"Service\", \"Acked By\", \"Severity\",\n            \"First Event Time\", \"Last Event Time\", \"Event Source\",\n            \"Trouble Ticket\", \"Trouble Ticket State\", \"Count\"];\n\n        var columns = _.map(columnNames, column => {\n            return { \"text\" : column }\n        });\n\n        var rows = _.map(alarms, alarm => {\n            var row = [\n                alarm.logMessage,\n                alarm.description,\n                alarm.uei,\n                alarm.nodeId,\n                alarm.nodeLabel,\n                alarm.ipAddress,\n                alarm.serviceType ? alarm.serviceType.name : undefined,\n                alarm.ackUser,\n                alarm.severity.label,\n                alarm.firstEventTime,\n                alarm.lastEventTime,\n                alarm.lastEvent.source,\n                alarm.troubleTicket,\n                alarm.troubleTicketState,\n                alarm.count\n            ];\n            row.meta = {\n                // Store the alarm for easy access by the panels - may not be necessary\n                'alarm': alarm,\n                // Store the name of the data-source as part of the data so that\n                // the panel can grab an instance of the DS to perform actions\n                // on the alarms\n                \"source\": this.name\n            };\n            return row;\n        });\n\n        return [\n            {\n                \"columns\": columns,\n                \"rows\": rows,\n                \"type\": \"table\",\n            }\n        ];\n    }\n\n\n    acknowledgeAlarm(alarmId) {\n        this.alarmClient.doUpdate(alarmId, {ack: true});\n    }\n\n    unacknowledgeAlarm(alarmId) {\n        this.alarmClient.doUpdate(alarmId, {ack: false});\n    }\n\n    clearAlarm(alarmId) {\n        this.alarmClient.doUpdate(alarmId, {clear: true});\n    }\n\n    escalateAlarm(alarmId) {\n        this.alarmClient.doUpdate(alarmId, {escalate: true});\n    }\n\n    createTicketForAlarm(alarmId) {\n        this.alarmClient.doTicketAction(alarmId, \"create\");\n    }\n\n    updateTicketForAlarm(alarmId) {\n        this.alarmClient.doTicketAction(alarmId, \"update\");\n    }\n\n    closeTicketForAlarm(alarmId) {\n        this.alarmClient.doTicketAction(alarmId, \"close\");\n    }\n}\n"]}