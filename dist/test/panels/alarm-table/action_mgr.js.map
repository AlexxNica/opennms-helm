{"version":3,"sources":["../../../../src/panels/alarm-table/action_mgr.js"],"names":["ActionMgr","ctrl","rows","options","buildContextMenu","length","self","addOptionToContextMenu","row","alarmDetails","source","alarmId","acknowledgeableRows","filter","alarm","ackTime","acknowledgeAlarm","unacknowledgeableRows","unacknowledgeAlarm","escalatableRows","severity","index","Severities","CLEARED","CRITICAL","escalateAlarm","cleareableRows","clearAlarm","createTicketRows","ticketerConfig","enabled","troubleTicketState","TroubleTicketStates","CREATE_FAILED","createTicketForAlarm","updateTicketRows","troubleTicket","updateTicketForAlarm","closeTicketRows","OPEN","CLOSE_FAILED","closeTicketForAlarm","actionableRows","group","text","action","lastGroup","push","getSuffix","click","each"],"mappings":"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","file":"action_mgr.js","sourcesContent":["import _ from 'lodash';\nimport {Model} from '../../opennms';\n\nexport class ActionMgr {\n  constructor(ctrl, rows) {\n    this.ctrl = ctrl;\n    this.rows = rows;\n    this.options = [];\n    this.buildContextMenu();\n  }\n\n  getContextMenu() {\n    return this.options;\n  }\n\n  buildContextMenu() {\n    // No selection, no context menu\n    if (this.rows.length < 1) {\n      return;\n    }\n\n    let self = this;\n    if (this.rows.length === 1) {\n      // Only show the option for the details modal when a single row is selected\n      this.addOptionToContextMenu('Details', 'Details', this.rows,\n        (row) => self.ctrl.alarmDetails(row.source, row.alarmId));\n    }\n\n    // We should only ack alarms that are not already acked\n    let acknowledgeableRows = _.filter(this.rows, row => row.alarm.ackTime === void 0);\n    this.addOptionToContextMenu('General', 'Acknowledge', acknowledgeableRows,\n        (row) => self.ctrl.acknowledgeAlarm(row.source, row.alarmId));\n\n    // We should only nack alarms that ARE already acked\n    let unacknowledgeableRows = _.filter(this.rows, row => row.alarm.ackTime);\n    this.addOptionToContextMenu('General', 'Unacknowledge', unacknowledgeableRows,\n      (row) => self.ctrl.unacknowledgeAlarm(row.source, row.alarmId));\n\n    // We should only escalate alarms that have a severity < CRITICAL\n    let escalatableRows = _.filter(this.rows, row => {\n      let severity = row.alarm.severity;\n      return severity.index >= Model.Severities.CLEARED.index && severity.index < Model.Severities.CRITICAL.index;\n    });\n    this.addOptionToContextMenu('General', 'Escalate', escalatableRows,\n      (row) => self.ctrl.escalateAlarm(row.source, row.alarmId));\n\n    // We should only clear alarms that have a severity > CLEARED\n    let cleareableRows = _.filter(this.rows, row => {\n      let severity = row.alarm.severity;\n      return severity.index > Model.Severities.CLEARED.index;\n    });\n    this.addOptionToContextMenu('General', 'Clear', cleareableRows,\n      (row) => self.ctrl.clearAlarm(row.source, row.alarmId));\n\n    // We should only create tickets for alarms that don't already have a ticket state, or where a previous create failed\n    let createTicketRows = _.filter(this.rows, row => {\n      return row.ticketerConfig && row.ticketerConfig.enabled\n        && (!row.alarm.troubleTicketState || row.alarm.troubleTicketState === Model.TroubleTicketStates.CREATE_FAILED);\n    });\n    this.addOptionToContextMenu('Ticketing', 'Create Ticket', createTicketRows,\n      (row) => self.ctrl.createTicketForAlarm(row.source, row.alarmId));\n\n    // We should only update tickets for alarms that have some ticket state\n    let updateTicketRows = _.filter(this.rows, row => {\n      return row.ticketerConfig && row.ticketerConfig.enabled\n        && (row.alarm.troubleTicketState && row.alarm.troubleTicket);\n    });\n    this.addOptionToContextMenu('Ticketing', 'Update Ticket', updateTicketRows,\n      (row) => self.ctrl.updateTicketForAlarm(row.source, row.alarmId));\n\n    // We should only close tickets for alarms that an open ticket, or where a previous close failed\n    let closeTicketRows = _.filter(this.rows, row => {\n      return row.ticketerConfig && row.ticketerConfig.enabled\n        && row.alarm.troubleTicketState && (alarm.troubleTicketState === Model.TroubleTicketStates.OPEN || row.alarm.troubleTicketState === Model.TroubleTicketStates.CLOSE_FAILED);\n    });\n    this.addOptionToContextMenu('Ticketing', 'Close Ticket', closeTicketRows,\n      (row) => self.ctrl.closeTicketForAlarm(row.source, row.alarmId));\n  }\n\n  getSuffix(actionableRows) {\n    if (this.rows.length <= 1) {\n      // Only show a suffix when multiple rows are selected\n      return '';\n    }\n    return ' (' + actionableRows.length + ')';\n  }\n\n  addOptionToContextMenu(group, text, rows, action) {\n    if (rows.length < 1) {\n      // No rows in selection, skip the option\n      return;\n    }\n\n    if (this.options.length > 0 && this.lastGroup !== group) {\n      // Prepend a separator when we first encounter a new group\n      this.options.push(null);\n    }\n    this.lastGroup = group;\n\n    // Add the option\n    this.options.push({\n      text: text + this.getSuffix(rows),\n      click: () => {\n        // Apply the action to each row in the selection\n        _.each(rows, row => action(row));\n      }\n    });\n  }\n\n}\n"]}