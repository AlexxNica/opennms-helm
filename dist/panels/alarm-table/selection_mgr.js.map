{"version":3,"sources":["../../../src/panels/alarm-table/selection_mgr.js"],"names":["_","SelectionMgr","getRowsInRange","onSelectionChangeCallback","clearSelectedRows","_selectedRows","Set","_lastSelectedRow","undefined","row","exclusiveModifier","rangeModifier","selectedRows","handleSelection","selectedRow","isEqual","Array","from","add","selectionRows","didSelectionChange","rowsToAddToSelection","filter","isRowSelected","selectionRow","rowsToRemoveFromSelection","getSelectedRows","findIndex","length","each","addRowToSelection","rowToAddToSelection"],"mappings":"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","file":"selection_mgr.js","sourcesContent":["import _ from 'lodash';\n\nexport class SelectionMgr {\n\n  constructor(getRowsInRange, onSelectionChangeCallback) {\n    this.clearSelectedRows();\n    this.getRowsInRange = getRowsInRange;\n    this.onSelectionChangeCallback = onSelectionChangeCallback;\n  }\n\n  clearSelectedRows() {\n    this._selectedRows = new Set();\n    this._lastSelectedRow = undefined;\n  }\n\n  handleRowClick(row, exclusiveModifier, rangeModifier) {\n    let selectedRows;\n    if (!rangeModifier || this._lastSelectedRow === undefined) {\n      // No other row was previously selected, use the row that was clicked on\n      selectedRows = [row];\n    } else {\n      // Build the list of rows between the last row that was clicked\n      // and the current row\n      selectedRows = this.getRowsInRange(this._lastSelectedRow, row);\n    }\n    this.handleSelection(selectedRows, exclusiveModifier);\n  }\n\n  isRowSelected(row) {\n    for (let selectedRow of this._selectedRows) {\n      if (_.isEqual(selectedRow, row)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getSelectedRows() {\n    return Array.from(this._selectedRows);\n  }\n\n  addRowToSelection(row) {\n    this._selectedRows.add(row);\n    this._lastSelectedRow = row;\n  }\n\n  handleSelection(selectionRows, exclusiveModifier) {\n    let didSelectionChange = false;\n    if (!exclusiveModifier) {\n      // Determine the rows we need to add to the selection\n      let rowsToAddToSelection = _.filter(selectionRows, selectionRow => !this.isRowSelected(selectionRow));\n\n      // Determine the rows we need to remove from the selection\n      let rowsToRemoveFromSelection = _.filter(this.getSelectedRows(), selectedRow => {\n        return _.findIndex(selectionRows, selectionRow => _.isEqual(selectedRow, selectionRow)) < 0;\n      });\n\n      if (rowsToRemoveFromSelection.length > 0) {\n        // Clear everything and add all the selected rows\n        this.clearSelectedRows();\n        _.each(selectionRows, selectionRow => this.addRowToSelection(selectionRow));\n        didSelectionChange = true;\n      } else if (rowsToAddToSelection.length > 0) {\n        // Add the selected rows\n        _.each(rowsToAddToSelection, rowToAddToSelection =>  this.addRowToSelection(rowToAddToSelection));\n        didSelectionChange = true;\n      }\n    } else {\n      // Add the rows to the current selection\n      _.each(selectionRows, selectionRow => {\n        if (!this.isRowSelected(selectionRow)) {\n          this.addRowToSelection(selectionRow);\n          didSelectionChange = true;\n        }\n      });\n    }\n\n    if (didSelectionChange && this.onSelectionChangeCallback) {\n      this.onSelectionChangeCallback();\n    }\n  }\n}\n"]}