{"version":3,"sources":["../../../src/datasources/mock-fault-ds/datasource.js"],"names":["OpenNMSFMDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","self","datasourceRequest","method","then","response","status","data","toTable","columns","rows","i","alarm","length","row","nodeLabel","logMessage","description","uei","nodeId","ackUser","severity","firstEventTime","lastEventTime","lastEvent","source","count","meta","push","Array","targets","fill","when","message","title","query","alarmId","console","log"],"mappings":"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","file":"datasource.js","sourcesContent":["export class OpenNMSFMDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var self = this;\n    return this.backendSrv.datasourceRequest({\n      url: '/public/plugins/opennms-helm-app/datasources/mock-fault-ds/alarms.json',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {data: self.toTable(options, response.data)};\n      }\n    });\n  }\n\n  toTable(options, data) {\n    var columns = [\n      {\n        \"text\": \"Node Label\",\n      },\n      {\n        \"text\": \"Log Message\",\n      },\n      {\n        \"text\": \"Description\",\n      },\n      {\n        \"text\": \"UEI\",\n      },\n      {\n        \"text\": \"Node ID\",\n      },\n      {\n        \"text\": \"Acked By\",\n      },\n      {\n        \"text\": \"Severity\",\n      },\n      {\n        \"text\": \"First Event Time\",\n      },\n      {\n        \"text\": \"Last Event Time\",\n      },\n      {\n        \"text\": \"Event Source\",\n      },\n      {\n        \"text\": \"Count\",\n      }\n    ];\n\n    var rows = [];\n    for (var i = 0; i < data.alarm.length; i++) {\n      var alarm = data.alarm[i];\n      var row = [\n        alarm.nodeLabel,\n        alarm.logMessage,\n        alarm.description,\n        alarm.uei,\n        alarm.nodeId,\n        alarm.ackUser,\n        alarm.severity,\n        alarm.firstEventTime,\n        alarm.lastEventTime,\n        alarm.lastEvent.source,\n        alarm.count\n      ];\n      row.meta = {\n        // Store the alarm for easy access by the panels\n        'alarm': alarm,\n        // Store the name of the data-source as part of the data so that\n        // the panel can grab an instance of the DS to perform actions\n        // on the alarms\n        'source': this.name\n      };\n      rows.push(row);\n    }\n\n    return Array(options.targets.length).fill({\n        \"columns\": columns,\n        \"rows\": rows,\n        \"type\": \"table\"\n    });\n  }\n\n  testDatasource() {\n    return this.q.when({status: \"success\", message: \"Data source is working\", title: \"Success\"});\n  }\n\n  annotationQuery(options) {\n    return this.q.when({});\n  }\n\n  metricFindQuery(query) {\n    return this.q.when({});\n  }\n\n  acknowledgeAlarm(alarmId) {\n    console.log(\"Ack\", alarmId);\n  }\n\n  unacknowledgeAlarm(alarmId) {\n    console.log(\"Unack\", alarmId);\n  }\n\n  clearAlarm(alarmId) {\n    console.log(\"Clear\", alarmId);\n  }\n\n  escalateAlarm(alarmId) {\n    console.log(\"Escalate\", alarmId);\n  }\n\n  createTicketForAlarm(alarmId) {\n    console.log(\"Create ticket\", alarmId);\n  }\n\n  updateTicketForAlarm(alarmId) {\n    console.log(\"Update ticket\", alarmId);\n  }\n\n  closeTicketForAlarm(alarmId) {\n    console.log(\"Close ticket\", alarmId);\n  }\n\n}\n"]}