{"version":3,"sources":["../../../src/datasources/perf-ds/datasource.js"],"names":["QueryType","interpolate","_","OpenNMSDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","searchLimit","target","options","query","buildQuery","request","source","length","datasourceRequest","data","method","headers","defer","resolve","measurements","when","then","response","status","message","processMeasurementsResponse","title","undefined","interpolatedQuery","first","interpolateValue","nodeFilterRegex","nodeResourcesRegex","nodeFilterQuery","match","metricFindNodeFilterQuery","nodeCriteria","metricFindNodeResourceQuery","params","filterRule","limit","count","totalCount","console","warn","results","each","node","id","toString","foreignId","foreignSource","push","text","label","value","expandable","encodeURIComponent","getNodeResource","depth","children","resource","resourceWithoutNodePrefix","self","start","range","from","valueOf","end","to","step","Math","floor","maxDataPoints","targets","transient","hide","Attribute","nodeId","resourceId","attribute","aggregation","subattribute","datasource","concat","interpolateSourceVariables","scopedVars","interpolatedSource","getRemoteResourceId","Expression","expression","interpolateExpressionVariables","Filter","filter","interpolatedFilterParms","interpolateVariables","filterParameters","keys","filters","map","filterParms","parameters","key","callback","entry","object","attributes","variables","templateVariable","variable","isString","current","option","comparator","orderBy","order","sysName","interpolatedNodeId","flattenResourcesWithAttributes","interpolatedResourceId","remoteResourceId","toLowerCase","rrdGraphAttributes","indexOf","sort","labels","columns","timestamps","series","i","j","nRows","nCols","datapoints","values","resources","resourcesWithAttributes","Object","prefix"],"mappings":"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","file":"datasource.js","sourcesContent":["import {QueryType} from './constants';\nimport {interpolate} from \"./interpolate\";\nimport _ from 'lodash';\n\nexport class OpenNMSDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    this.searchLimit = 25;\n    this.target = {};\n  }\n\n  query(options) {\n    // Generate the query\n    var query = this.buildQuery(options);\n\n    // Issue the request\n    var request;\n    if (query.source.length > 0) {\n      request = this.backendSrv.datasourceRequest({\n        url: this.url + '/rest/measurements',\n        data: query,\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'}\n      });\n    } else {\n      // There are no sources listed, use an empty set of measurements\n      request = this.$q.defer();\n      request.resolve({measurements: []});\n    }\n\n    // Convert the results to the expected format\n    return this.$q.when(request).then(function (response) {\n      if (response.status !== 200) {\n        throw { message: 'Query failed.' };\n      }\n      return OpenNMSDatasource.processMeasurementsResponse(response);\n    });\n  }\n\n  // Used for testing the connection from the datasource configuration page\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/info',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working!\", title: \"Success\"};\n      }\n    });\n  }\n\n  // Used by template queries\n  metricFindQuery(query) {\n    if (query === null || query === undefined || query === \"\") {\n      return this.$q.resolve([]);\n    }\n\n    var interpolatedQuery = _.first(this.interpolateValue(query));\n    var nodeFilterRegex = /nodeFilter\\((.*)\\)/;\n    var nodeResourcesRegex = /nodeResources\\((.*)\\)/;\n\n    if (interpolatedQuery !== undefined) {\n      var nodeFilterQuery = interpolatedQuery.match(nodeFilterRegex);\n      if (nodeFilterQuery) {\n        return this.metricFindNodeFilterQuery(nodeFilterQuery[1]);\n      }\n\n      var nodeCriteria = interpolatedQuery.match(nodeResourcesRegex);\n      if (nodeCriteria) {\n        return this.metricFindNodeResourceQuery(nodeCriteria[1]);\n      }\n    }\n\n    return this.$q.resolve([]);\n  }\n\n  metricFindNodeFilterQuery(query) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/nodes',\n      method: 'GET',\n      params: {\n        filterRule: query,\n        limit: 0\n      }\n    }).then(function (response) {\n      if (response.data.count > response.data.totalCount) {\n        console.warn(\"Filter matches \" + response.data.totalCount + \" records, but only \" + response.data.count + \" will be used.\");\n      }\n      var results = [];\n      _.each(response.data.node, function (node) {\n        var nodeCriteria = node.id.toString();\n        if (node.foreignId !== null && node.foreignSource !== null) {\n          nodeCriteria = node.foreignSource + \":\" + node.foreignId;\n        }\n        results.push({text: node.label, value: nodeCriteria, expandable: true});\n      });\n      return results;\n    });\n  }\n\n  metricFindNodeResourceQuery(query) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/resources/' + encodeURIComponent(OpenNMSDatasource.getNodeResource(query)),\n      method: 'GET',\n      params: {\n        depth: 1\n      }\n    }).then(function (response) {\n      var results = [];\n      _.each(response.data.children.resource, function (resource) {\n        var resourceWithoutNodePrefix = resource.id.match(/node(Source)?\\[.*?\\]\\.(.*)/);\n        if (resourceWithoutNodePrefix) {\n          results.push({text: resourceWithoutNodePrefix[2], expandable: true});\n        }\n      });\n      return results;\n    });\n  }\n\n  buildQuery(options) {\n    var self = this,\n      start = options.range.from.valueOf(),\n      end = options.range.to.valueOf(),\n      step = Math.floor((end - start) / options.maxDataPoints);\n\n    var query = {\n      \"start\": start,\n      \"end\": end,\n      \"step\": step,\n      \"maxrows\": options.maxDataPoints,\n      \"source\": [],\n      \"expression\": []\n    };\n\n    _.each(options.targets, function (target) {\n      var transient = \"false\";\n      if (target.hide) {\n        transient = true;\n      }\n\n      if (target.type === QueryType.Attribute) {\n        if (!((target.nodeId && target.resourceId && target.attribute))) {\n          return;\n        }\n\n        var label = target.label;\n        if (label === undefined || label === '') {\n          label = target.attribute;\n        }\n\n        // Build the source\n        var source = {\n          \"aggregation\": target.aggregation,\n          \"attribute\": target.attribute,\n          \"label\": label,\n          \"resourceId\": target.resourceId,\n          \"nodeId\": target.nodeId, // temporary attribute used for interpolation\n          \"transient\": transient\n        };\n\n        if (target.subattribute !== undefined && target.subattribute !== '') {\n          source.datasource = target.subattribute;\n        }\n\n        // Perform variable substitution - may generate additional queries\n        query.source = query.source.concat(self.interpolateSourceVariables(source, options.scopedVars, (interpolatedSource) => {\n          // Calculate the effective resource id after the interpolation\n          interpolatedSource.resourceId = OpenNMSDatasource.getRemoteResourceId(interpolatedSource.nodeId, interpolatedSource.resourceId);\n          delete interpolatedSource.nodeId;\n        }));\n      } else if (target.type === QueryType.Expression) {\n        if (!((target.label && target.expression))) {\n          return;\n        }\n\n        // Build the expression\n        var expression = {\n          \"label\": target.label,\n          \"value\": target.expression,\n          \"transient\": transient\n        };\n\n        // Perform variable substitution - may generate additional expressions\n        query.expression = query.expression.concat(self.interpolateExpressionVariables(expression, options.scopedVars));\n      } else if (target.type === QueryType.Filter) {\n        if (!((target.filter))) {\n          return;\n        }\n\n        // Interpolate the filter parameters\n        var interpolatedFilterParms = self.interpolateVariables(target.filterParameters, _.keys(target.filterParameters), options.scopedVars);\n\n        var filters = _.map(interpolatedFilterParms, (filterParms) => {\n          // Build the filter definition\n          var parameters = [];\n          _.each(filterParms, function (value, key) {\n            // Skip parameters with undefined or empty values\n            if (value === undefined || value === '' || value === null) {\n              return;\n            }\n\n            parameters.push({\n              'key': key,\n              'value': value\n            });\n          });\n\n          return {\n            \"name\": target.filter.name,\n            \"parameter\": parameters\n          };\n        });\n\n        // Only add the filter attribute to the query when one or more filters are specified since\n        // OpenNMS versions before 17.0.0 do not support it\n        if (!query.filter) {\n          query.filter = filters;\n        } else {\n          query.filter = query.filter.concat(filters);\n        }\n      }\n    });\n\n    return query;\n  }\n\n  interpolateSourceVariables(source, scopedVars, callback) {\n    return this.interpolateVariables(source, ['nodeId', 'resourceId', 'attribute', 'datasource', 'label'], scopedVars, callback);\n  }\n\n  interpolateExpressionVariables(expression, scopedVars) {\n    return this.interpolateVariables(expression, ['value', 'label'], scopedVars);\n  }\n\n  interpolateValue(value, scopedVars) {\n    return _.map(this.interpolateVariables({'value': value}, ['value'], scopedVars), function(entry) {\n      return entry.value;\n    });\n  }\n\n  interpolateVariables(object, attributes, scopedVars, callback) {\n    // Reformat the variables to work with our interpolate function\n    var variables = [];\n    _.each(this.templateSrv.variables, function(templateVariable) {\n      var variable = {\n        name: templateVariable.name,\n        value: []\n      };\n\n      // If this templateVar exists in scopedVars, we need to look at the scoped values\n      if (scopedVars && scopedVars[variable.name] !== undefined) {\n        variable.value.push(scopedVars[variable.name].value);\n      } else {\n        // Single-valued?\n        if (_.isString(templateVariable.current.value)) {\n          variable.value.push(templateVariable.current.value);\n        } else {\n          _.each(templateVariable.current.value, function(value) {\n            if (value === \"$__all\") {\n              _.each(templateVariable.options, function(option) {\n                // \"All\" is part of the options, so make sure to skip that one\n                if (option.value !== \"$__all\") {\n                  variable.value.push(option.value);\n                }\n              });\n            } else {\n              variable.value.push(value);\n            }\n          });\n        }\n      }\n\n      variables.push(variable);\n    });\n    return interpolate(object, attributes, variables, callback);\n  }\n\n  static processMeasurementsResponse(response) {\n    var labels = response.data.labels;\n    var columns = response.data.columns;\n    var timestamps = response.data.timestamps;\n    var series = [];\n    var i, j, nRows, nCols, datapoints;\n\n    if (timestamps !== undefined) {\n      nRows = timestamps.length;\n      nCols = columns.length;\n\n      for (i = 0; i < nCols; i++) {\n        datapoints = [];\n        for (j = 0; j < nRows; j++) {\n          // Skip rows that are out-of-ranges - this can happen with RRD data in narrow time spans\n          if (timestamps[j] < response.data.start || timestamps[j] > response.data.end) {\n            continue;\n          }\n\n          datapoints.push([columns[i].values[j], timestamps[j]]);\n        }\n\n        series.push({\n          target: labels[i],\n          datapoints: datapoints\n        });\n      }\n    }\n\n    return {data: series};\n  }\n\n  static flattenResourcesWithAttributes(resources, resourcesWithAttributes) {\n    _.each(resources, function (resource) {\n      if (resource.rrdGraphAttributes !== undefined && Object.keys(resource.rrdGraphAttributes).length > 0) {\n        resourcesWithAttributes.push(resource);\n      }\n      if (resource.children !== undefined && resource.children.resource.length > 0) {\n        OpenNMSDatasource.flattenResourcesWithAttributes(resource.children.resource, resourcesWithAttributes);\n      }\n    });\n    return resourcesWithAttributes;\n  }\n\n  static getNodeResource(nodeId) {\n    var prefix = \"\";\n    if (nodeId.indexOf(\":\") > 0) {\n      prefix = \"nodeSource[\";\n    } else {\n      prefix = \"node[\";\n    }\n    return prefix + nodeId + \"]\";\n  }\n\n  static getRemoteResourceId(nodeId, resourceId) {\n    return OpenNMSDatasource.getNodeResource(nodeId) + \".\" + resourceId;\n  }\n\n  searchForNodes(query) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/nodes',\n      method: 'GET',\n      params: {\n        limit: this.searchLimit,\n        match: 'any',\n        comparator: 'ilike',\n        orderBy: 'id',\n        order: 'asc',\n        label: '%' + query + '%',\n        sysName: '%' + query + '%',\n        'ipInterface.ipAddress': '%' + query + '%',\n        'ipInterface.ipHostName': '%' + query + '%',\n        'foreignId': query + '%' // doesn't support leading '%'\n      }\n    });\n  }\n\n  getResourcesWithAttributesForNode(nodeId) {\n    var interpolatedNodeId = _.first(this.interpolateValue(nodeId));\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/resources/fornode/' + encodeURIComponent(interpolatedNodeId),\n      method: 'GET',\n      params: {\n        depth: -1\n      }\n    }).then(function (results) {\n      return OpenNMSDatasource.flattenResourcesWithAttributes([results.data], []);\n    });\n  }\n\n  getAvailableFilters() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/measurements/filters',\n      method: 'GET'\n    });\n  }\n\n  suggestAttributes(nodeId, resourceId, query) {\n    var interpolatedNodeId = _.first(this.interpolateValue(nodeId)),\n        interpolatedResourceId = _.first(this.interpolateValue(resourceId));\n    var remoteResourceId = OpenNMSDatasource.getRemoteResourceId(interpolatedNodeId, interpolatedResourceId);\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/rest/resources/' + encodeURIComponent(remoteResourceId),\n      method: 'GET',\n      params: {\n        depth: -1\n      }\n    }).then(function (results) {\n      query = query.toLowerCase();\n      var attributes = [];\n      _.each(results.data.rrdGraphAttributes, function (value, key) {\n        if (key.toLowerCase().indexOf(query) >= 0) {\n          attributes.push(key);\n        }\n      });\n      attributes.sort();\n\n      return attributes;\n    });\n  }\n}\n"]}