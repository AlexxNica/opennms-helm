{"version":3,"sources":["../../../src/datasources/fault-ds/query-directive.js"],"names":["angular","_","module","directive","templateUrl","controller","restrict","controllerAs","scope","query","datasource","queryCtrl","$scope","uiSegmentSrv","$q","QueryCtrl","updateControls","getSuggestions","clause","segment","index","segments","restriction","type","metricFindQuery","find","then","attributes","map","attribute","newKey","name","catch","handleQueryError","bind","attributeSegment","value","comparators","comparator","newOperator","theQuery","values","searchResult","newKeyValue","label","operators","operator","newCondition","when","segmentUpdated","segmentIndex","updateTargetFilter","performClick","control","action","findParent"],"mappings":"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","file":"query-directive.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\n\nangular.module('grafana.directives')\n    .directive('onmsQuery', function() {\n        return {\n            templateUrl: 'public/plugins/opennms-helm-app/datasources/fault-ds/partials/query.html',\n            controller: 'QueryController',\n            restrict: 'EA',\n            controllerAs: 'ctrl',\n            scope: {\n                query: \"=\", // The ui query object\n                datasource: \"=\", // The datasource\n                queryCtrl: \"=\", // The QueryCtrl object\n            }\n        };\n    })\n    .controller('QueryController', function ($scope, uiSegmentSrv, $q) {\n        const datasource = $scope.datasource;\n        const QueryCtrl = $scope.queryCtrl;\n        $scope.query.updateControls();\n\n        $scope.getSuggestions = function(clause, segment, index) {\n            var segments = clause.restriction.segments;\n\n            // attribute input\n            if (segment.type == 'key' || segment.type == 'plus-button') {\n                return datasource.metricFindQuery({find: \"attributes\"})\n                    .then(function(attributes) {\n                        let segments = _.map(attributes, function(attribute) {\n                            var segment = uiSegmentSrv.newKey(attribute.name);\n                            return segment;\n                        });\n                        return segments;\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // comparator input\n            if (segment.type == 'operator') {\n                let attributeSegment = segments[index-1];\n                return datasource.metricFindQuery({'find': 'comparators', 'attribute': attributeSegment.value})\n                    .then(function(comparators) {\n                        return _.map(comparators, function(comparator) {\n                            return uiSegmentSrv.newOperator(comparator);\n                        });\n                    })\n            }\n\n            // value input\n            if (segment.type == 'value') {\n                let attributeSegment = segments[index-2];\n                let theQuery = {\n                    'find': 'values',\n                    'attribute': attributeSegment.value,\n                    'query': segment.value === 'select attribute value' ? '' : segment.value\n                };\n\n                return datasource.metricFindQuery(theQuery)\n                    .then(function(values) {\n                        return _.map(values, function(searchResult) {\n                            var segment = uiSegmentSrv.newKeyValue(searchResult.label);\n                            return segment;\n                        })\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // condition input\n            if (segment.type === 'condition') {\n                return this.datasource.metricFindQuery({find: 'operators'}).then(function(operators) {\n                    return _.map(operators, function(operator) {\n                        return uiSegmentSrv.newCondition(operator.label);\n                    });\n                }).catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n            return $q.when([]);\n        };\n\n        $scope.segmentUpdated = function(clause, segment, segmentIndex) {\n            $scope.query.segmentUpdated(clause, segment, segmentIndex);\n            $scope.query.updateControls();\n            QueryCtrl.updateTargetFilter();\n        };\n\n        $scope.performClick = function(clause, control) {\n            if (control.action) {\n                control.action($scope.query, clause);\n                $scope.query.findParent().updateControls();\n            }\n        }\n    });\n"]}