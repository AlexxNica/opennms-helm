{"version":3,"sources":["../../../src/datasources/fault-ds/query-directive.js"],"names":["angular","_","ComparatorMapping","UI","module","directive","templateUrl","controller","restrict","controllerAs","scope","query","datasource","queryCtrl","$scope","uiSegmentSrv","$q","QueryCtrl","updateControls","findOperators","attribute","metricFindQuery","then","comparators","filter","comparator","aliases","length","map","uiComparator","getUiComparator","newOperator","catch","handleQueryError","bind","getSuggestions","clause","segment","index","segments","restriction","type","find","properties","property","newKey","id","attributeSegment","value","theQuery","Restriction","VALUE_PLACEHOLDER","values","searchResult","newKeyValue","label","operators","operator","newCondition","when","segmentUpdated","segmentIndex","fake","asRestrictionDTO","getAttribute","getComparator","console","log","setComparator","updateTargetFilter","performClick","control","action","findParent"],"mappings":"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","file":"query-directive.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {ComparatorMapping} from \"./mapping/ComparatorMapping\";\nimport {UI} from \"./UI\";\n\nangular.module('grafana.directives')\n    .directive('onmsQuery', function() {\n        return {\n            templateUrl: 'public/plugins/opennms-helm-app/datasources/fault-ds/partials/query.html',\n            controller: 'QueryController',\n            restrict: 'EA',\n            controllerAs: 'ctrl',\n            scope: {\n                query: \"=\", // The ui query object\n                datasource: \"=\", // The datasource\n                queryCtrl: \"=\", // The QueryCtrl object\n            }\n        };\n    })\n    .controller('QueryController', function ($scope, uiSegmentSrv, $q) {\n        const datasource = $scope.datasource;\n        const QueryCtrl = $scope.queryCtrl;\n        $scope.query.updateControls();\n\n        $scope.findOperators = function(attribute) {\n            return datasource.metricFindQuery({'find': 'comparators', 'attribute': attribute})\n                .then(function(comparators) {\n                    // the API.Comparator.id or API.Comparator.label fields cannot be used.\n                    comparators = _.filter(comparators, function(comparator) {\n                        return comparator.aliases && comparator.aliases.length > 0;\n                    });\n                    return _.map(comparators, function(comparator) {\n                        const uiComparator = new ComparatorMapping().getUiComparator(comparator);\n                        return uiSegmentSrv.newOperator(uiComparator);\n                    });\n                }).catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n        };\n\n        $scope.getSuggestions = function(clause, segment, index) {\n            var segments = clause.restriction.segments;\n\n            // attribute input\n            if (segment.type == 'key' || segment.type == 'plus-button') {\n                return datasource.metricFindQuery({find: \"attributes\"})\n                    .then(function(properties) {\n                        let segments = _.map(properties, function(property) {\n                            var segment = uiSegmentSrv.newKey(property.id);\n                            return segment;\n                        });\n                        return segments;\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // comparator input\n            if (segment.type == 'operator') {\n                let attributeSegment = segments[index-1];\n                return $scope.findOperators(attributeSegment.value);\n            }\n\n            // value input\n            if (segment.type == 'value') {\n                let attributeSegment = segments[index-2];\n                let theQuery = {\n                    'find': 'values',\n                    'attribute': attributeSegment.value,\n                    'query': segment.value === UI.Restriction.VALUE_PLACEHOLDER ? '' : segment.value\n                };\n\n                return datasource.metricFindQuery(theQuery)\n                    .then(function(values) {\n                        return _.map(values, function(searchResult) {\n                            var segment = uiSegmentSrv.newKeyValue(searchResult.label);\n                            return segment;\n                        })\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // condition input\n            if (segment.type === 'condition') {\n                return this.datasource.metricFindQuery({find: 'operators'}).then(function(operators) {\n                    return _.map(operators, function(operator) {\n                        return uiSegmentSrv.newCondition(operator.label);\n                    });\n                }).catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n            return $q.when([]);\n        };\n\n        $scope.segmentUpdated = function(clause, segment, segmentIndex) {\n            // Make the value not a fake input anymore\n            if (segment.type === 'value') {\n                segment.fake = false;\n            }\n\n            // It must be verified that the comparator is still in the list of comparators.\n            // If not, the first comparator in the list is fallen back to.\n            // The check is only necessary if a restriction is already fully defined.\n            if (segmentIndex == 0 && clause.restriction.asRestrictionDTO()) {\n                const attribute = clause.restriction.getAttribute();\n                $scope.findOperators(attribute).then(segments => {\n                    const comparators = _.map(segments, segment => {\n                        return segment.value;\n                    });\n                    const comparator = comparators.find(comparator => {\n                        return comparator === clause.restriction.getComparator();\n                    });\n                    // In case no comparator was found, fall back to the 1st one in the list\n                    if (comparators.length >= 1 && (!comparator || comparator === void 0)) {\n                        console.log(\"Comparator \" + clause.restriction.getComparator() + \" is selected but not supported. Falling back to \" + comparators[0]);\n                        clause.restriction.setComparator(comparators[0]);\n                    }\n                }).then(() => {\n                    $scope.query.updateControls();\n                    QueryCtrl.updateTargetFilter();\n                });\n            } else { // Default behaviour\n                $scope.query.updateControls();\n                QueryCtrl.updateTargetFilter();\n            }\n        };\n\n        $scope.performClick = function(clause, control) {\n            if (control.action) {\n                control.action($scope.query, clause);\n                QueryCtrl.updateTargetFilter();\n                $scope.query.findParent().updateControls();\n            }\n        }\n    });\n"]}